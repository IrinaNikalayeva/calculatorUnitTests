<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="10" ignored="2" total="39" passed="27">
  <reporter-output>
  </reporter-output>
  <suite name="testngSuite" duration-ms="43" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
    <groups>
      <group name="regression">
        <method signature="CosTest.cosTest(double, double)[pri:0, instance:testng.CosTest@6956de9]" name="cosTest" class="testng.CosTest"/>
        <method signature="CtgTest.CgTest(double, double)[pri:0, instance:testng.CtgTest@18ef96]" name="CgTest" class="testng.CtgTest"/>
        <method signature="DivDoubleTest.divDoubleTest(double, double, double)[pri:0, instance:testng.DivDoubleTest@4f4a7090]" name="divDoubleTest" class="testng.DivDoubleTest"/>
        <method signature="MultDoubleTest.multDoubleTest(double, double, double)[pri:0, instance:testng.MultDoubleTest@33e5ccce]" name="multDoubleTest" class="testng.MultDoubleTest"/>
        <method signature="PowTest.PowDoubleTest(double, double, double)[pri:0, instance:testng.PowTest@52d455b8]" name="PowDoubleTest" class="testng.PowTest"/>
        <method signature="SqrtTest.SqrtTest(double, double)[pri:0, instance:testng.SqrtTest@270421f5]" name="SqrtTest" class="testng.SqrtTest"/>
        <method signature="SubDoubleTest.SubDoubleTest(double, double, double)[pri:0, instance:testng.SubDoubleTest@18e8568]" name="SubDoubleTest" class="testng.SubDoubleTest"/>
        <method signature="SumDoubleTest.SumDoubleTest(double, double, double)[pri:0, instance:testng.SumDoubleTest@1c2c22f3]" name="SumDoubleTest" class="testng.SumDoubleTest"/>
        <method signature="TgTest.TgTest(double, double)[pri:0, instance:testng.TgTest@5a42bbf4]" name="TgTest" class="testng.TgTest"/>
      </group> <!-- regression -->
      <group name="smoke">
        <method signature="DivDoubleTest.divDoubleTest(double, double, double)[pri:0, instance:testng.DivDoubleTest@4f4a7090]" name="divDoubleTest" class="testng.DivDoubleTest"/>
        <method signature="MultDoubleTest.multDoubleTest(double, double, double)[pri:0, instance:testng.MultDoubleTest@33e5ccce]" name="multDoubleTest" class="testng.MultDoubleTest"/>
        <method signature="SubDoubleTest.SubDoubleTest(double, double, double)[pri:0, instance:testng.SubDoubleTest@18e8568]" name="SubDoubleTest" class="testng.SubDoubleTest"/>
        <method signature="SumDoubleTest.SumDoubleTest(double, double, double)[pri:0, instance:testng.SumDoubleTest@1c2c22f3]" name="SumDoubleTest" class="testng.SumDoubleTest"/>
      </group> <!-- smoke -->
      <group name="extended">
        <method signature="CosTest.cosTest(double, double)[pri:0, instance:testng.CosTest@6956de9]" name="cosTest" class="testng.CosTest"/>
        <method signature="CtgTest.CgTest(double, double)[pri:0, instance:testng.CtgTest@18ef96]" name="CgTest" class="testng.CtgTest"/>
        <method signature="PowTest.PowDoubleTest(double, double, double)[pri:0, instance:testng.PowTest@52d455b8]" name="PowDoubleTest" class="testng.PowTest"/>
        <method signature="SqrtTest.SqrtTest(double, double)[pri:0, instance:testng.SqrtTest@270421f5]" name="SqrtTest" class="testng.SqrtTest"/>
        <method signature="TgTest.TgTest(double, double)[pri:0, instance:testng.TgTest@5a42bbf4]" name="TgTest" class="testng.TgTest"/>
      </group> <!-- extended -->
    </groups>
    <test name="calculator base" duration-ms="43" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
      <class name="testng.CosTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:testng.CosTest@6956de9]" name="setUp" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="FAIL" signature="cosTest(double, double)[pri:0, instance:testng.CosTest@6956de9]" name="cosTest" duration-ms="1" started-at="2019-08-11T08:35:12Z" data-provider="cosTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [1.0] but found [0.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [1.0] but found [0.0]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:442)
at testng.CosTest.cosTest(CosTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cosTest -->
        <test-method status="FAIL" signature="cosTest(double, double)[pri:0, instance:testng.CosTest@6956de9]" name="cosTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="cosTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.28366218546]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [0.28366218546] but found [0.9589242746631385]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [0.28366218546] but found [0.9589242746631385]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:442)
at testng.CosTest.cosTest(CosTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cosTest -->
        <test-method status="FAIL" signature="cosTest(double, double)[pri:0, instance:testng.CosTest@6956de9]" name="cosTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="cosTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [0.0] but found [0.8414709848078965]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [0.0] but found [0.8414709848078965]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:442)
at testng.CosTest.cosTest(CosTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cosTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:testng.CosTest@6956de9]" name="tearDown" is-config="true" duration-ms="1" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- testng.CosTest -->
      <class name="testng.SubDoubleTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:testng.SubDoubleTest@18e8568]" name="setUp" is-config="true" duration-ms="9" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="SubDoubleTest(double, double, double)[pri:0, instance:testng.SubDoubleTest@18e8568]" name="SubDoubleTest" duration-ms="1" started-at="2019-08-11T08:35:12Z" data-provider="subTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubDoubleTest -->
        <test-method status="PASS" signature="SubDoubleTest(double, double, double)[pri:0, instance:testng.SubDoubleTest@18e8568]" name="SubDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="subTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubDoubleTest -->
        <test-method status="PASS" signature="SubDoubleTest(double, double, double)[pri:0, instance:testng.SubDoubleTest@18e8568]" name="SubDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="subTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubDoubleTest -->
        <test-method status="PASS" signature="SubDoubleTest(double, double, double)[pri:0, instance:testng.SubDoubleTest@18e8568]" name="SubDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="subTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-2.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubDoubleTest -->
        <test-method status="PASS" signature="SubDoubleTest(double, double, double)[pri:0, instance:testng.SubDoubleTest@18e8568]" name="SubDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="subTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SubDoubleTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:testng.SubDoubleTest@18e8568]" name="tearDown" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- testng.SubDoubleTest -->
      <class name="testng.CtgTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:testng.CtgTest@18ef96]" name="setUp" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="CgTest(double, double)[pri:0, instance:testng.CtgTest@18ef96]" name="CgTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="ctgTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CgTest -->
        <test-method status="FAIL" signature="CgTest(double, double)[pri:0, instance:testng.CtgTest@18ef96]" name="CgTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="ctgTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0699268]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[wrong result. Method implementation is wrong expected [0.0699268] but found [0.7615941559557649]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: wrong result. Method implementation is wrong expected [0.0699268] but found [0.7615941559557649]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at cgTest(CtgTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CgTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:testng.CtgTest@18ef96]" name="tearDown" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="FAIL" signature="CgTest(double, double)[pri:0, instance:testng.CtgTest@18ef96]" name="CgTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="ctgTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6.25]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.1095178]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[wrong result. Method implementation is wrong expected [0.1095178] but found [0.9999925467214317]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: wrong result. Method implementation is wrong expected [0.1095178] but found [0.9999925467214317]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at cgTest(CtgTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CgTest -->
      </class> <!-- testng.CtgTest -->
      <class name="testng.MultDoubleTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:testng.MultDoubleTest@33e5ccce]" name="setUp" is-config="true" duration-ms="9" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="FAIL" signature="multDoubleTest(double, double, double)[pri:0, instance:testng.MultDoubleTest@33e5ccce]" name="multDoubleTest" duration-ms="1" started-at="2019-08-11T08:35:12Z" data-provider="multTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2.31]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Operation error: result was rounded! expected [2.31] but found [2.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Operation error: result was rounded! expected [2.31] but found [2.0]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at testng.MultDoubleTest.multDoubleTest(MultDoubleTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multDoubleTest -->
        <test-method status="PASS" signature="multDoubleTest(double, double, double)[pri:0, instance:testng.MultDoubleTest@33e5ccce]" name="multDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="multTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[25]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multDoubleTest -->
        <test-method status="PASS" signature="multDoubleTest(double, double, double)[pri:0, instance:testng.MultDoubleTest@33e5ccce]" name="multDoubleTest" duration-ms="1" started-at="2019-08-11T08:35:12Z" data-provider="multTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-2.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multDoubleTest -->
        <test-method status="PASS" signature="multDoubleTest(double, double, double)[pri:0, instance:testng.MultDoubleTest@33e5ccce]" name="multDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="multTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multDoubleTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:testng.MultDoubleTest@33e5ccce]" name="tearDown" is-config="true" duration-ms="1" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="multDoubleTest(double, double, double)[pri:0, instance:testng.MultDoubleTest@33e5ccce]" name="multDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="multTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multDoubleTest -->
      </class> <!-- testng.MultDoubleTest -->
      <class name="testng.PowTest">
        <test-method status="PASS" signature="PowDoubleTest(double, double, double)[pri:0, instance:testng.PowTest@52d455b8]" name="PowDoubleTest" duration-ms="1" started-at="2019-08-11T08:35:12Z" data-provider="powTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[25]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PowDoubleTest -->
        <test-method status="PASS" signature="PowDoubleTest(double, double, double)[pri:0, instance:testng.PowTest@52d455b8]" name="PowDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="powTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PowDoubleTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:testng.PowTest@52d455b8]" name="setUp" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="PowDoubleTest(double, double, double)[pri:0, instance:testng.PowTest@52d455b8]" name="PowDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="powTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PowDoubleTest -->
        <test-method status="FAIL" signature="PowDoubleTest(double, double, double)[pri:0, instance:testng.PowTest@52d455b8]" name="PowDoubleTest" duration-ms="1" started-at="2019-08-11T08:35:12Z" data-provider="powTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2.14354693]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The result is rounded! Error in method implementation! expected [2.14354693] but found [2.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The result is rounded! Error in method implementation! expected [2.14354693] but found [2.0]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at powDoubleTest(PowTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PowDoubleTest -->
        <test-method status="PASS" signature="PowDoubleTest(double, double, double)[pri:0, instance:testng.PowTest@52d455b8]" name="PowDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="powTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PowDoubleTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:testng.PowTest@52d455b8]" name="tearDown" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- testng.PowTest -->
      <class name="testng.TgTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:testng.TgTest@5a42bbf4]" name="setUp" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="FAIL" signature="TgTest(double, double)[pri:0, instance:testng.TgTest@5a42bbf4]" name="TgTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="tgTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[wrong result. Method implementation is wrong expected [0.0] but found [NaN]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: wrong result. Method implementation is wrong expected [0.0] but found [NaN]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at tgTest(TgTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TgTest -->
        <test-method status="FAIL" signature="TgTest(double, double)[pri:0, instance:testng.TgTest@5a42bbf4]" name="TgTest" duration-ms="1" started-at="2019-08-11T08:35:12Z" data-provider="tgTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0699268]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[wrong result. Method implementation is wrong expected [0.0699268] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: wrong result. Method implementation is wrong expected [0.0699268] but found [1.0]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at tgTest(TgTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TgTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:testng.TgTest@5a42bbf4]" name="tearDown" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="FAIL" signature="TgTest(double, double)[pri:0, instance:testng.TgTest@5a42bbf4]" name="TgTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="tgTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6.25]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.1095178]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[wrong result. Method implementation is wrong expected [0.1095178] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: wrong result. Method implementation is wrong expected [0.1095178] but found [1.0]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at tgTest(TgTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TgTest -->
      </class> <!-- testng.TgTest -->
      <class name="testng.SqrtTest">
        <test-method status="PASS" signature="SqrtTest(double, double)[pri:0, instance:testng.SqrtTest@270421f5]" name="SqrtTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="sqrtTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SqrtTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:testng.SqrtTest@270421f5]" name="setUp" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="SqrtTest(double, double)[pri:0, instance:testng.SqrtTest@270421f5]" name="SqrtTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="sqrtTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SqrtTest -->
        <test-method status="PASS" signature="SqrtTest(double, double)[pri:0, instance:testng.SqrtTest@270421f5]" name="SqrtTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="sqrtTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6.25]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SqrtTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:testng.SqrtTest@270421f5]" name="tearDown" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- testng.SqrtTest -->
      <class name="testng.SumDoubleTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:testng.SumDoubleTest@1c2c22f3]" name="setUp" is-config="true" duration-ms="9" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="SumDoubleTest(double, double, double)[pri:0, instance:testng.SumDoubleTest@1c2c22f3]" name="SumDoubleTest" duration-ms="1" started-at="2019-08-11T08:35:12Z" data-provider="sumTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[3.1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SumDoubleTest -->
        <test-method status="PASS" signature="SumDoubleTest(double, double, double)[pri:0, instance:testng.SumDoubleTest@1c2c22f3]" name="SumDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="sumTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-2.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SumDoubleTest -->
        <test-method status="PASS" signature="SumDoubleTest(double, double, double)[pri:0, instance:testng.SumDoubleTest@1c2c22f3]" name="SumDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="sumTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SumDoubleTest -->
        <test-method status="PASS" signature="SumDoubleTest(double, double, double)[pri:0, instance:testng.SumDoubleTest@1c2c22f3]" name="SumDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="sumTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SumDoubleTest -->
        <test-method status="PASS" signature="SumDoubleTest(double, double, double)[pri:0, instance:testng.SumDoubleTest@1c2c22f3]" name="SumDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="sumTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-8.5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-17.5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SumDoubleTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:testng.SumDoubleTest@1c2c22f3]" name="tearDown" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="SumDoubleTest(double, double, double)[pri:0, instance:testng.SumDoubleTest@1c2c22f3]" name="SumDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="sumTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SumDoubleTest -->
      </class> <!-- testng.SumDoubleTest -->
      <class name="testng.DivDoubleTest">
        <test-method status="PASS" signature="divDoubleTest(double, double, double)[pri:0, instance:testng.DivDoubleTest@4f4a7090]" name="divDoubleTest" duration-ms="1" started-at="2019-08-11T08:35:12Z" data-provider="divTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.5238095238095238]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- divDoubleTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:testng.DivDoubleTest@4f4a7090]" name="setUp" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="divDoubleTest(double, double, double)[pri:0, instance:testng.DivDoubleTest@4f4a7090]" name="divDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="divTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- divDoubleTest -->
        <test-method status="PASS" signature="divDoubleTest(double, double, double)[pri:0, instance:testng.DivDoubleTest@4f4a7090]" name="divDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="divTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- divDoubleTest -->
        <test-method status="PASS" signature="divDoubleTest(double, double, double)[pri:0, instance:testng.DivDoubleTest@4f4a7090]" name="divDoubleTest" duration-ms="0" started-at="2019-08-11T08:35:12Z" data-provider="divTestData" finished-at="2019-08-11T08:35:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-2.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-0.5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- divDoubleTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:testng.DivDoubleTest@4f4a7090]" name="tearDown" is-config="true" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- testng.DivDoubleTest -->
    </test> <!-- calculator base -->
  </suite> <!-- testngSuite -->
  <suite name="Default Suite" duration-ms="0" started-at="2019-08-11T08:35:12Z" finished-at="2019-08-11T08:35:12Z">
    <groups>
    </groups>
  </suite> <!-- Default Suite -->
</testng-results>
